/*
?Сделайте генератор пазлов, в котором даете человеку несколько названий магазинов. В названии каждого магазина должна быть некая подсказка того, что в нем продают. Также генератор генерирует подсказку на определенный магазин. Он находит магазин по вашей подсказке и название магазина делит на две равные части (если на равные не получается, то на одна букву больше в правой стороне). Человеку нужно записать данную часть слова столько раз, сколько гласных или согласных в данном слове. Например: в данном магазине продают строительный материалы и человек должен найти магазин, в котором есть приписка строй.

*/

/*
import nightsky::puzzle::Puzzle;
import nightsky::puzzle::PuzzleImage;
import nightsky::puzzle::Reveal;
import nightsky::puzzle::RevealPrecise;
import std::math::Math;
import std::collections::List;
import std::string::String;

class Main {
    public function getRandomNumber(a: int, b: int) -> int {
      return (Math::random() * (b - a + 1) as float + a as float) as int;
    }
    
    public function getStore(select: int, index: int) -> String {
        let stores = [
            // Строительный магазин
            ["Строй|Мастер", "Строй|Товар", "ДомС|трой", "Стро|йГрад", "Масте|рСтрой", "Быстр|оСтрой", "Стро|йТех", "ПроСт|ройка", "СтройЭ|ксперт", "Супер|Строй"  ],

            // Продуктовый магазин
            ["Еда|Мир", "Вку|сМир", "ФрешМ|аркет", "Проду|ктЛэнд", "Вкусный|Квартал", "Кулина|рМаркет", "Гурм|анШоп", "Продукт|Экспресс", "ФруктыОв|ощиМаркет", "Мясн|ойРай"],

            // Электроника и бытовая техника
            ["Техн|оМир", "Элект|роШоп", "ТехМ|аркет", "Гаджет|Мастер", "Электр|оПрофи", "ТехноЭ|ксперт", "Гадже|тЛэнд", "Элект|роБум", "Цифро|войМир", "Техно|Центр"],

            // Одежда и обувь
            ["Мода|Лэнд", "Шикарн|ыйСтиль", "Трен|дМода", "Одежд|аЛюкс", "Обув|ьГрад", "МодаМ|астер", "Мод|аШоп", "Мир|Моды", "Гардер|обСтиль", "Супер|Обувь"],

            // Косметика и парфюмерия
            ["Красо|таМир", "ШармМ|аркет", "Арома|Маркет", "Косме|тЛюкс", "Стильны|йМагазин", "МирКр|асоты", "Парфюм|Мастер", "Парф|юмШоп", "Космет|Элеганс", "Аром|аЛэнд"],

            // Спортивные товары
            ["Спор|тЛэнд", "Акти|вМир", "Фитнес|Мастер", "Спор|тШоп", "Энерги|яСпорта", "Физку|льтМаг", "Туризм|Маркет", "ПроС|порт", "МирТре|нажеров", "Экстри|мСпорт"],

            // Детские товары и игрушки
            ["Дет|Мир", "Игруш|каЛэнд", "ЮныйМ|астер", "Весёлый|Ребёнок", "Малы|шГрад", "Карап|узШоп", "МирИг|рушек", "Радость|Детства", "Детский|Магазин", "Крох|аМир"],

            // Мебель и интерьер
            ["Мебел|ьГрад", "Комфорт|Магазин", "Мебел|ьЛюкс", "Интерь|ерШарм", "Мебе|льПро", "Интер|ьерШоп", "Уют|Лэнд", "Мебел|ьХолл", "Мебель|Мастер", "Деко|рМир"],

            // Аптека и товары для здоровья
            ["Здоро|вьеМир", "Аптек|аПлюс", "ФармаЭ|ксперт", "Здра|вШоп", "Фарма|Маркет", "Здоровье|Экспресс", "МедМ|аркет", "Лекар|ьПрофи", "Здрав|ицаШоп", "Медик|аЛэнд"],

            // Зоомагазин
            ["ЗооЛ|авка", "МирПи|томцев", "ЗооЭк|сперт", "ЛапаМ|аркет", "Питом|ецШоп", "Звер|оМир", "Хвост|икПлюс", "ДомПи|томца", "Зоо|Град", "КотИП|ёсШоп"]
        ];
        
        return stores[select][index];
    }
    
    public function storeHints(select: int) -> String {
        let storeHints = [
            // Строительный магазин
            ["В данном магазине продают строительные материалы",
            "Здесь можно найти инструменты для ремонта",
            "Магазин предлагает широкий выбор отделочных материалов"],

            // Продуктовый магазин
            ["В этом магазине продаются свежие продукты",
            "Здесь можно купить мясо, овощи и фрукты",
            "Магазин предлагает большой ассортимент молочной продукции"],

            // Электроника и бытовая техника
            ["В данном магазине продаётся электроника",
            "Здесь можно приобрести бытовую технику для дома",
            "Магазин специализируется на гаджетах и устройствах"],

            // Одежда и обувь
            ["В магазине продают модную одежду",
            "Здесь можно найти обувь для любого сезона",
            "Магазин предлагает аксессуары и верхнюю одежду"],

            // Косметика и парфюмерия
            ["В этом магазине продаётся косметика для ухода за кожей",
            "Здесь можно найти различные ароматы и парфюмы",
            "Магазин предлагает декоративную косметику и аксессуары"],

            // Спортивные товары
            ["В данном магазине продаются спортивные товары",
            "Здесь можно приобрести инвентарь для активного отдыха",
            "Магазин предлагает одежду и обувь для тренировок"],

            // Детские товары и игрушки
            ["В магазине продаются игрушки для детей",
            "Здесь можно найти товары для ухода за малышами",
            "Магазин предлагает одежду и аксессуары для детей"],

            // Мебель и интерьер
            ["В этом магазине продаётся мебель для дома",
            "Здесь можно приобрести предметы интерьера и декор",
            "Магазин предлагает товары для создания уюта в доме"],

            // Аптека и товары для здоровья
            ["В данном магазине продаются лекарства и витамины",
            "Здесь можно найти товары для поддержания здоровья",
            "Магазин предлагает медицинские товары и средства гигиены"],

            // Зоомагазин
            ["В этом магазине продаются товары для животных",
            "Здесь можно найти корма для домашних питомцев",
            "Магазин предлагает игрушки и аксессуары для кошек и собак"]
        ];
        
        return storeHints[select][Main::getRandomNumber(0, 2)]
    }
    
    public function duplicateStringByCount(storeName: String, stringToDuplicate: String, isConsonants: bool) -> String {
        let vowels = ["аА", "еУ", "ёЁ", "иИ", "оО", "уУ", "ыЫ", "эЭ", "юЮ", "яЯ"];
        let consonants = ["бБ", "вВ", "гГ", "дД", "жЖ", "зЗ", "йЙ", "кК", "лЛ", "мМ", "нН", "пП", "рР", "сС", "тТ", "фФ", "хХ", "цЦ", "чЧ", "шШ", "щЩ", "ьЬ", "ъЪ"];

        let charsToCheck = if (isConsonants) {vowels} else {consonants};
        let duplicateCount = 0;

        for (let i in 1..storeName.split("").length()) {
            for (let j in 0..charsToCheck.length()) {
                if (storeName.split("")[i] == charsToCheck[j].split("")[1] || storeName.split("")[i] == charsToCheck[j].split("")[2]) {duplicateCount+=1}
            }
        }

        // Создание строки с дублированием
        let result: List<String> = [];
        for (let i in 0..duplicateCount) {
            result.push(stringToDuplicate);
        }

        return String::join(result, " ");
    }
    
     function gen_puzzle() -> Puzzle {
        let select = Main::getRandomNumber(0, 9);
        let name = Main::getStore(select, Main::getRandomNumber(0, 9));
        let history = Main::storeHints(select);
        let VorC = if(Main::getRandomNumber(0, 1) == 1) {false} else {true};
        let ans = Main::duplicateStringByCount(name, name.split("|")[1], VorC);
            
        let aNames: List<String> = [];
        for (let i in 0..10) {
            if (i == select) {
                aNames.push(String::join(name.split("|"), ""));
            } else {
                if (Main::getRandomNumber(0, 1) == 1) {
                    aNames.push(String::join(Main::getStore(i, Main::getRandomNumber(0, 9)).split("|"), ""))
                }
            }
        }
        if (aNames.length() < 1) {
            let new_name = Main::getStore(Main::getRandomNumber(0, 9), Main::getRandomNumber(0, 9));
            if (name == new_name) {
                new_name = Main::getStore(Main::getRandomNumber(0, 9), Main::getRandomNumber(0, 9));
            }
            
            aNames.push(String::join(new_name.split("|"), ""));
        }
        
        let nameSc = "Инна Аня Алина Оля Катя Полина Арина Вера Надя Соня Бьянка Василиса Ванесса Вероника Жанна".split(" ")[Main::getRandomNumber(0, 14)];
        let wher = "в школе|на факультативе|у репетитора|на олимпиаде".split("|")[Main::getRandomNumber(0, 3)];
        let what = "задачу|задачу на внимательность|упражнение|тест, в котором есть задача|дополнительное задание|задание".split("|")[Main::getRandomNumber(0, 5)];
        let whatDo = "вычислить|рассчитать|посчитать|определить|найти".split("|")[Main::getRandomNumber(0, 4)];

        
        let sc= nameSc + " получила " + wher + " " + what + ". "
            + "На листике дан список магазинов: " 
            + String::join(aNames, " ") + ". " 
            + "Её попросили " + whatDo 
            + " сколько " + if (VorC) {"гласных"} else {"согласных"}
            + " в названии магазина и дублировать правую часть названия нужного магазина "
            + "столько же, сколько " + if (VorC) {"гласных"} else {"согласных"}
            + " получилось, разделив его название на две равные части (если на равные не получается, то на одна букву больше в правой стороне). "
            + "Если известно что на нужный магазин есть подсказка: " + history + "."; 
        
        if(Main::getRandomNumber(0, 1) == 1 ) {
            sc="Дан список магазинов: " + String::join(aNames, " ") + ". "
                +"Требуется определить сколько "
                + if (VorC) {"гласных"} else {"согласных"}
                +" в названии магазина и дублировать правую часть названия нужного магазина "
                + "столько же, сколько " + if (VorC) {"гласных"} else {"согласных"}
                +" получилось, разделив его название на две равные части (если на равные не получается, то на одна букву больше в правой стороне). " 
                + "Если известно что на нужный магазин есть подсказка: " + history + "."; 
        }
         
        let desc = sc 
            + "\n Пример ответа следующий: тШоп тШоп тШоп тШоп тШоп"
            + "\n <reveal ans>Ответ</reveal>";
        
         
        let expl = "Получаем список магазинов: " 
            + String::join(aNames, " ") + ". " 
            + "\nИ подсказку к нужному нам магазину: " + history + ". "
            + "\nПолучается что нужный нам магазин это - "
            + String::join(name.split("|"), "") + ". "
            + "\nТеперь разделяем данное название на две равные части (если на равные не получается, то на одна букву больше в правой стороне) и получаем "
            + String::join(name.split("|"), " и ") + ". "
            + "\nИ считаем количество " + if (VorC) {"гласных"} else {"согласных"}
            + " и дублируем правую часть столько же раз. \n Получаем ответ: "
            + ans
         
        return new Puzzle {
            question: desc,
            solution: expl,
            images: [],
            reveals: [
                new RevealPrecise {
                    name: "ans",
                    answer: ans
                } as Reveal
            ],
        }
    }
}
*/
