/*
?Сделайте генератор паззлов, который генерирует слово, буквы в котором расположены по разным местам. Буквы должны быть разных размеров. Паззл должен требовать собрать слово по возрастанию размеров букв, либо же по уменьшению размеров букв.

*/

/*
import nightsky::puzzle::Puzzle;
import nightsky::puzzle::PuzzleImage;
import nightsky::puzzle::Reveal;
import nightsky::puzzle::RevealPrecise;
import nightsky::canvas::Canvas;
import nightsky::canvas::Point2D;
import nightsky::canvas::Color;
import nightsky::canvas::TextAlign;
import nightsky::canvas::TextAlignLeft;
import nightsky::canvas::TextAlignRight;
import nightsky::canvas::TextAlignCenter;
import std::math::Math;
import std::collections::List;
import std::collections::ListSort;
import std::string::String;

class Main {
    function gen_puzzle() -> Puzzle {
        let more = if (Main::getRandomIntInRange(0, 1) == 1) {"возрастанию"} else {"убыванию"};
        let word = [
            "абажур", "абажуры", "абаз", "абак", "абака", "аббат", "аббатство", "аббревиатура",
            "выпуск", "выручка", "выставка", "выход", "гадание", "гаджет", "газета", "галерея", 
            "гармония", "гарантия", "гарнизон", "гастрономия", "география", "герой", "гимнастика", 
            "гипотеза", "главарь", "глобус", "гном", "гобелен", "государство", "гравировка", 
            "грамматика", "гранат", "грация", "авиаматка", "гроздь", "грузовик", "губернатор", "гудок", 
            "абвер", "абзац", "абонемент", "абонент", "абордаж", "аквалангистка", "аборт", "абракадабра",
            "адиабата", "абсолют", "абстракция", "абсцесс", "абсурд", "авангард", "аванс", "аванпост",
            "авантюра", "авантюризм", "аккомпаниаторша", "август", "авиабаза", "авиабилет", "авиапочта", 
            "авиарейс", "авиастроение", "автобус", "амальгама", "автодорога", "автомат", "автоматика", 
            "автомобилист", "автономия", "автор", "авторадио", "авторитет", "автотранспорт", 
            "агава", "агент", "агитация", "агломерация", "агнец", "агрегат", "агрессия", "агробизнес", 
            "аудиенция", "аудитория", "аура", "афганец", "афера", "афиша", "анаплазма", "ацетон", 
            "африка", "бакалавр", "багаж", "бакенбарды", "балалайка", "балет", "балкон", "баланс", 
            "банан", "банк", "банкир", "банкомат", "анафаза", "банкротство", "баня", "баржа", "абракадабра", 
            "барьер", "баскетбол", "батарея", "бахрома", "баянист", "бегемот", "бензин", "береза", 
            "беседа", "библиотека", "анаграмма", "биржа", "благодарность", "бланк", "аванкамера", 
            "авторадиограмма", "бобр", "богатырь", "богиня", "богородица", "богослужение", "бодрость", 
            "бокал", "боксер", "болезнь", "боль", "борьба", "ботинок", "аппаратура", "братство", 
            "бревно", "бригадир", "бриллиант", "брошюра", "аппаратчица", "бублик", "будущее", "булавка", 
            "агропропаганда", "буклет", "булка", "буржуазия", "буфет", "бухгалтерия", "быстрота", "бюджет", 
            "вагон", "валюта", "вандализм", "варвар", "варенье", "вафля", "вахта", "ведро", "веер", 
            "вектор", "великан", "венгрия", "вентиляция", "версия", "вертолет", "ветер", "ветеринар", 
            "взгляд", "взломщик", "анабаптистка", "вода", "воздействие", "возмездие", "волк", "авиабаза", 
            "авиатрасса", "вопль", "воронка", "восклицание", "астраханка", "впечатление", "враг", 
            "азербайджанка", "агроэкология", "адвокат", "администрация", "адмирал", "административный", 
            "азарт", "азбука", "азия", "академия", "акация", "аквариум", "аккумулятор", "аккорд", 
            "аккуратность", "акробат", "акробатика", "аксельбант", "акселерация", "аксиома", 
            "активация", "актив", "активист", "активность", "актуальность", "акула", "алгоритм", 
            "алебарда", "алебастр", "александр", "александра", "александрович", "алиби", "алкоголь", 
            "аллея", "аллигатор", "алмаз", "алхимия", "алфавит", "альбатрос", "альбом", "альтернатива", 
            "альтруизм", "аляска", "амазонка", "амбразура", "амбиция", "америка", "амнистия", "аморальность", 
            "ампула", "амфибия", "анализ", "аналог", "ананас", "анатомия", "ангел", "анекдот", 
            "анемия", "аниматор", "анонс", "анормальность", "антарктида", "антенна", "антология", 
            "антураж", "анфилада", "анютины", "аншлаг", "апатия", "апелляция", "апельсин", "аппарат", 
            "аппетит", "апрель", "арабика", "аранжировка", "арбат", "арбитраж", "аргумент", "ареал", 
            "арена", "аристократ", "аристократия", "армия", "аромат", "артиллерия", "арфист", 
            "архив", "архитектура", "архипелаг", "арьергард", "аспект", "ассортимент", "астрология", 
            "астронавт", "астрономия", "атаковала", "атлант", "атмосфера", "атмосферность", "атрибут", 
            "врата", "время", "вселенная", "встреча", "выгода", "выдача", "выдумка", "выживание", 
            "авиаразведка", "гуманитарий", "авиаразведка"
        ][Main::getRandomIntInRange(0, 255)];
        
        let canvas = Main::getImg(word, more);
        
        let name = "Инна|Аня|Алина|Оля|Катя|Полина|Арина|Вера|Надя|Соня|Бьянка|Василиса|Ванесса|Вероника|Жанна".split("|")[Main::getRandomIntInRange(0, 14)];
        let wher = "в школе|на факультативе|у репетитора|на олимпиаде".split("|")[Main::getRandomIntInRange(0, 3)]
        let what = "задачу|задачу на внимательность|упражнение|тест, в котором есть задача|дополнительное задание|задание".split("|")[Main::getRandomIntInRange(0, 5)]
        let task = "отмечен|показан|выставлен|указан|виден".split("|")[Main::getRandomIntInRange(0, 4)];
        let whatDo = "вычислить|понять|выяснить|определить|найти".split("|")[Main::getRandomIntInRange(0, 4)];

        let conditions = [
            "и собрать слово по",
            "и получить слово по",
            "и записать слово по"
        ][Main::getRandomIntInRange(0, 2)];
        let conditions2 = [
            "размеров букв",
            "размера букв",
            "величины букв",
            "диапазона размеров букв"
        ][Main::getRandomIntInRange(0, 3)];

        let sc = name + " получила " + wher + " " + what + ". "
            + " На листике " + task + " ряд букв: \n <img canvas>"
            + "\nЕё попросили " + whatDo + " " + conditions + " " + more + " " + conditions2 + ".";

        if(Main::getRandomIntInRange(0, 1) == 1) {
            sc = "Дан ряд букв: \n <img canvas>"
                + "\nТребуется определить " + conditions + " " + more + " " + conditions2 + ".";
        }

        let desc = sc 
            + "\n Пример вывода, следующий: \"биржа\""
            + "\n<reveal ans>Ответ</reveal>";

        let expl = "Исходя их изображения будем определять слово по " + more + " размера букв: \n";
        if (more == "возрастанию") {
            for (let i in 1..word.split("").length()) {
                expl += "Буква " + word.split("")[i] + " - " + String::from_int(25 + 5 * (i - 1)) + "px \n ";
            }
        } else {
            for (let i in 1..word.split("").length()) {
                expl += "Буква " + word.split("")[i] + " - " + String::from_int(80 - 5 * (i - 1)) + "px \n ";
            }
        }
        
        expl += "\nСледовательно ответ: " + word;

        return new Puzzle {
            question: desc,
            solution: expl,
            images: [
                new PuzzleImage {
                    name: "canvas",
                    image: canvas
                }
            ],
            reveals: [
                new RevealPrecise {
                    name: "ans",
                    answer: word
                } as Reveal
            ],
        }
    }
    
    function getImg(word: String, more: String) -> Canvas {
        let canvas = Canvas::create(2500, 200, Color::rgb(255, 255, 255));
        
        let ltr: List<String> = [];

        for (let i in 0..word.split("").length()) {
            if (word.split("")[i] != "") {
                ltr.push(word.split("")[i] + String::from_int(i));
            }
        }
        
        let lSize = std::collections::Map::<String, int>::empty();
        
        if (more == "возрастанию") {
            for (let i in 0..ltr.length()) {
                std::collections::Map::<String, int>::set(lSize, ltr[i], 25 + 5 * i);
            }
        } else {
            for (let i in 0..ltr.length()) {
                std::collections::Map::<String, int>::set(lSize, ltr[i], 80 - 5 * i);
            }
        }
        
        for (let i in 0..Main::getRandomIntInRange(10, 15)) {
            ltr = Main::shuffleArray(ltr);
        }
        
        for (let i in 0..ltr.length()) {
            Canvas::text(canvas, 10 + 50 * i, 100, ltr[i].split("")[1], lSize[ltr[i]], new TextAlignLeft{} as TextAlign, Color::rgb(0, 0, 0));
            Canvas::text(canvas, 10 + 50 * i, 130, String::from_int(lSize[ltr[i]]) + "px", 12, new TextAlignLeft{} as TextAlign, Color::rgb(0, 0, 0));
        }
        
        return canvas;
    }
    
    function shuffleArray(array: List<String>) -> List<String> {
        for (let i in 1..array.length()) {
            let j = Main::getRandomIntInRange(i-1, i);
            let temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }

        return array;
    }

    function getRandomIntInRange(a: int, b: int) -> int {
        return (Math::random() * (b - a + 1) as float + a as float) as int;
    }
}
*/