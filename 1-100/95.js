/*
?Создайте генератор пазлов, который на входе генерирует два слова и задает продолжительность произношения каждой буквы (некоторые буквы в словах должны совпадать). А на выходе просит определить слово, произношение которого займет большее количество времени.

*/

/*
import nightsky::puzzle::Puzzle;
import nightsky::puzzle::PuzzleImage;
import nightsky::puzzle::Reveal;
import nightsky::puzzle::RevealPrecise;
import nightsky::canvas::Canvas;
import nightsky::canvas::Point2D;
import nightsky::canvas::Color;
import nightsky::canvas::TextAlign;
import nightsky::canvas::TextAlignLeft;
import nightsky::canvas::TextAlignRight;
import nightsky::canvas::TextAlignCenter;
import std::math::Math;
import std::collections::List;
import std::collections::ListSort;
import std::string::String;
import community::near::spensa2::plural::PluralRu;
import community::near::cfuser::ah04919::Contains::StringInList;

class Letter {
    public symbol: String,
    public time: int
}

class Main {
    function gen_puzzle() -> Puzzle {
        let words = [
            "абажур", "абажуры", "абаз", "абак", "абака", "аббат", "аббатство", "аббревиатура",
            "выпуск", "выручка", "выставка", "выход", "гадание", "гаджет", "газета", "галерея", 
            "гармония", "гарантия", "гарнизон", "гастрономия", "география", "герой", "гимнастика", 
            "гипотеза", "главарь", "глобус", "гном", "гобелен", "государство", "гравировка", 
            "грамматика", "гранат", "грация", "авиаматка", "гроздь", "грузовик", "губернатор", "гудок", 
            "абвер", "абзац", "абонемент", "абонент", "абордаж", "аквалангистка", "аборт", "абракадабра",
            "адиабата", "абсолют", "абстракция", "абсцесс", "абсурд", "авангард", "аванс", "аванпост",
            "авантюра", "авантюризм", "аккомпаниаторша", "август", "авиабаза", "авиабилет", "авиапочта", 
            "авиарейс", "авиастроение", "автобус", "амальгама", "автодорога", "автомат", "автоматика", 
            "автомобилист", "автономия", "автор", "авторадио", "авторитет", "автотранспорт", 
            "агава", "агент", "агитация", "агломерация", "агнец", "агрегат", "агрессия", "агробизнес", 
            "аудиенция", "аудитория", "аура", "афганец", "афера", "афиша", "анаплазма", "ацетон", 
            "африка", "бакалавр", "багаж", "бакенбарды", "балалайка", "балет", "балкон", "баланс", 
            "банан", "банк", "банкир", "банкомат", "анафаза", "банкротство", "баня", "баржа", "абракадабра", 
            "барьер", "баскетбол", "батарея", "бахрома", "баянист", "бегемот", "бензин", "береза", 
            "беседа", "библиотека", "анаграмма", "биржа", "благодарность", "бланк", "аванкамера", 
            "авторадиограмма", "бобр", "богатырь", "богиня", "богородица", "богослужение", "бодрость", 
            "бокал", "боксер", "болезнь", "боль", "борьба", "ботинок", "аппаратура", "братство", 
            "бревно", "бригадир", "бриллиант", "брошюра", "аппаратчица", "бублик", "будущее", "булавка", 
            "агропропаганда", "буклет", "булка", "буржуазия", "буфет", "бухгалтерия", "быстрота", "бюджет", 
            "вагон", "валюта", "вандализм", "варвар", "варенье", "вафля", "вахта", "ведро", "веер", 
            "вектор", "великан", "венгрия", "вентиляция", "версия", "вертолет", "ветер", "ветеринар", 
            "взгляд", "взломщик", "анабаптистка", "вода", "воздействие", "возмездие", "волк", "авиабаза", 
            "авиатрасса", "вопль", "воронка", "восклицание", "астраханка", "впечатление", "враг", 
            "азербайджанка", "агроэкология", "адвокат", "администрация", "адмирал", "административный", 
            "азарт", "азбука", "азия", "академия", "акация", "аквариум", "аккумулятор", "аккорд", 
            "аккуратность", "акробат", "акробатика", "аксельбант", "акселерация", "аксиома", 
            "активация", "актив", "активист", "активность", "актуальность", "акула", "алгоритм", 
            "алебарда", "алебастр", "александр", "александра", "александрович", "алиби", "алкоголь", 
            "аллея", "аллигатор", "алмаз", "алхимия", "алфавит", "альбатрос", "альбом", "альтернатива", 
            "альтруизм", "аляска", "амазонка", "амбразура", "амбиция", "америка", "амнистия", "аморальность", 
            "ампула", "амфибия", "анализ", "аналог", "ананас", "анатомия", "ангел", "анекдот", 
            "анемия", "аниматор", "анонс", "анормальность", "антарктида", "антенна", "антология", 
            "антураж", "анфилада", "анютины", "аншлаг", "апатия", "апелляция", "апельсин", "аппарат", 
            "аппетит", "апрель", "арабика", "аранжировка", "арбат", "арбитраж", "аргумент", "ареал", 
            "арена", "аристократ", "аристократия", "армия", "аромат", "артиллерия", "арфист", 
            "архив", "архитектура", "архипелаг", "арьергард", "аспект", "ассортимент", "астрология", 
            "астронавт", "астрономия", "атаковала", "атлант", "атмосфера", "атмосферность", "атрибут", 
            "врата", "время", "вселенная", "встреча", "выгода", "выдача", "выдумка", "выживание", 
            "авиаразведка", "гуманитарий", "авиаразведка"
        ];
        
        let index = [Main::getRandomIntInRange(0, 255), Main::getRandomIntInRange(0, 255)];
        
        while (index[0] == index[1]) {
            index[1] = Main::getRandomIntInRange(0, 255);
        }
        
        let letters: List<Letter> = [];
        for (let i in 0..2) {
            let ind = index[i];
            
            for (let j in 0..words[ind].split("").length()) {
                if (words[ind].split("")[j] == "") {continue;}
                    
                let l: List<String> = [];
                
                for (let lt in letters) {
                    l.push(lt.symbol)
                }
                
                
                if (!StringInList::contains(l, words[ind].split("")[j])) {
                    let t = Main::getRandomIntInRange(1, 10);
                    letters.push(new Letter {symbol: words[ind].split("")[j], time: t});
                }
            }   
        }
        
        let name = "Инна|Аня|Алина|Оля|Катя|Полина|Арина|Вера|Надя|Соня|Бьянка|Василиса|Ванесса|Вероника|Жанна".split("|")[Main::getRandomIntInRange(0, 14)];
        let wher = "в школе|на факультативе|у репетитора|на олимпиаде".split("|")[Main::getRandomIntInRange(0, 3)];
        let what = "задачу|задачу на внимательность|упражнение|тест, в котором есть задача|дополнительное задание|задание".split("|")[Main::getRandomIntInRange(0, 5)];
        let task = "отмечено|показано|выставлено|указано|видно".split("|")[Main::getRandomIntInRange(0, 4)];
        let whatDo = "вычислить|понять|выяснить|определить|найти".split("|")[Main::getRandomIntInRange(0, 4)];

        let conditions = [
            "слово, произношение которого займет большее количество времени",
            "слово, на произношение которого требуется больше всего времени",
            "слово с самым длительным временем произношения",
            "слово, которое занимает больше времени для произношения",
            "слово, для произношения которого нужно больше времени",
            "слово с максимальной длительностью произношения",
            "слово, на произношение которого уходит наибольшее время",
            "слово, которое произносится дольше других",
            "слово, требующее больше времени для полного произношения",
            "слово, которое занимает самое большое время для произнесения",
            "слово с наибольшей продолжительностью произношения"
        ][Main::getRandomIntInRange(0, 9)];

        let sc = name + " получила " + wher + " " + what + ". "
            + " На листике " + task + " два слова: " + words[index[0]] + ", " + words[index[1]] + ". "
            + "\nЕё попросили " + whatDo + " " + conditions + ", если известен следующий список продолжительности произношения каждой буквы: \n";

        if(Main::getRandomIntInRange(0, 1) == 1) {
            sc = "Дано два слова: " + words[index[0]] + ", " + words[index[1]] + ". "
                + "Требуется определить " + conditions + ", если известен следующий список продолжительности произношения каждой буквы: \n";
        }
        for (let i in 0..letters.length()) {
            sc += letters[i].symbol + " - " + String::from_int(letters[i].time) + " мс\n"
        }

        let desc = sc + " Если продолжительность произношения одинаковая, берём первое слово из списка. "
            + "\n Пример вывода, следующий: \"автономия\""
            + "\n<reveal ans>Ответ</reveal>";

        let time = [0, 0];
        let expl = "Определим продолжительность произношения первого слова: " + words[index[0]] + "\n";
        for (let i in 0..words[index[0]].split("").length()) {
            let w = words[index[0]].split("")[i]
            if (w == "") {continue;}

            for (let letter in letters) {
                if (w == letter.symbol) {
                    expl += String::from_int(letter.time) + " + ";
                    time[0] = time[0] + letter.time;
                }
            }
        } 
        expl = expl[0..expl.length()-2] + " = " + String::from_int(time[0]) + " мc \n Теперь определим продолжительность произношения второго слова: " + words[index[1]] + "\n";
        for (let i in 0..words[index[1]].split("").length()) {
            let w = words[index[1]].split("")[i]
            if (w == "") {continue;}

            for (let letter in letters) {
                if (w == letter.symbol) {
                    expl += String::from_int(letter.time) + " + ";
                    time[1] = time[1] + letter.time;
                }
            }
        } 
        let ans = if (time[0] > time[1]) {0} else if (time[0] == time[1]) {0} else {1}
        expl = expl[0..expl.length()-2] + " = " + String::from_int(time[1]) + " мc \n Следовательно овтет: " + words[index[ans]];

        return new Puzzle {
            question: desc,
            solution: expl,
            images: [],
            reveals: [
                new RevealPrecise {
                    name: "ans",
                    answer: words[index[ans]]
                } as Reveal
            ],
        }
    }

    function getRandomIntInRange(a: int, b: int) -> int {
        return (Math::random() * (b - a + 1) as float + a as float) as int;
    }
}
*/